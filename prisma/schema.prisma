generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  password  String
  bases     Base[]
}

model Base {
  id            String    @id @default(cuid())
  name          String
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables        Table[]
  tableCount    Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?
}

model Table {
  id        String   @id @default(cuid())
  name      String   
  baseId    String
  base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)
  columns   Column[]
  rows      Row[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([baseId, name])
}

enum ColumnType {
  TEXT
  NUMBER
}

model Column {
  id        String   @id @default(uuid())
  name      String
  type      ColumnType
  tableId   String
  table     Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cell      Cell[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tableId, name])
}

model Row {
  id        String   @id @default(uuid())
  name      String?
  tableId   String
  table     Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)
  cells     Cell[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cell {
  id        String   @id @default(uuid())
  rowId     String
  row       Row      @relation(fields: [rowId], references: [id], onDelete: Cascade)
  columnId  String
  column    Column   @relation(fields: [columnId], references: [id], onDelete: Cascade)
  textValue String?  
  numValue  Float?   
}